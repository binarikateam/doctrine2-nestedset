<?xml version="1.0" encoding="UTF-8"?>

<project name="tmv-doctrine2-nestedset" default="full-build">
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <condition property="isLinux">
        <os family="unix" />
    </condition>

    <property name="php"        value="php" />
    <property name="pdepend"    value="${basedir}/vendor/bin/pdepend.bat" />
    <property name="phpcpd"     value="${basedir}/vendor/bin/phpcpd.bat" />
    <property name="phploc"     value="${basedir}/vendor/bin/phploc.bat" />
    <property name="phpmd"      value="${basedir}/vendor/bin/phpmd.bat" />
    <property name="phpunit"    value="${basedir}/vendor/bin/phpunit.bat" />
    <property name="phpmetrics" value="${basedir}/vendor/bin/phpmetrics.bat" />
    <property name="phpdox"     value="${basedir}/vendor/bin/phpdox.bat" />
    <property name="composer"   value="${basedir}/composer.phar" />

    <target name="composer-check">
        <available file="${composer}" property="composer.present" />
    </target>

    <target name="composer-download" depends="composer-check" unless="composer.present">
        <property name="composer.noselfupdate" value="true" />
        <get src="https://getcomposer.org/composer.phar" dest="${composer}" />
    </target>

    <target name="composer-selfupdate" depends="composer-download" unless="composer.noselfupdate">
        <exec executable="${php}">
            <arg value="${composer}" />
            <arg value="self-update" />
            <arg value="--quiet" />
        </exec>
    </target>

    <target name="composer" depends="composer-selfupdate" unless="composer.done" description="Run composer install">
        <exec executable="${php}">
            <arg value="${composer}" />
            <arg value="install" />
        </exec>

        <property name="composer.done" value="true" />
    </target>

    <target name="composer-production" depends="composer-selfupdate" unless="composer.done" description="Run composer install">
        <exec executable="${php}">
            <arg value="${composer}" />
            <arg value="install" />
            <arg value="--no-dev" />
        </exec>

        <property name="composer.done" value="true" />
    </target>

    <target name="full-build" depends="prepare,composer,static-analysis,phpunit,-check-failure,-finalize" description="Performs static analysis, runs the tests, and generates project documentation" />

    <target name="production" depends="prepare,composer-production,-finalize" description="Prepares and migrates, clearing code for production" />

    <target name="full-build-parallel" depends="prepare,composer,static-analysis-parallel,phpunit,-check-failure" description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation" />

    <target name="quick-build" depends="prepare,composer,lint,phpunit-no-coverage" description="Performs a lint check and runs the tests (without generating code coverage reports)" />

    <target name="static-analysis" depends="lint,phploc-ci,pdepend,phpmd-ci,phpcpd-ci" description="Performs static analysis" />

    <target name="static-analysis-parallel" description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpmd-ci" />
            </sequential>

            <antcall target="lint" />
            <antcall target="phpcpd-ci" />
            <antcall target="phploc-ci" />
        </parallel>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${basedir}/temporary/build/coverage" />
        <delete dir="${basedir}/temporary/build/logs" />
        <delete dir="${basedir}/temporary/build/pdepend" />
        <delete dir="${basedir}/build" />

        <property name="clean.done" value="true" />
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/temporary/build/coverage" />
        <mkdir dir="${basedir}/temporary/build/logs" />
        <mkdir dir="${basedir}/temporary/build/pdepend" />
        <mkdir dir="${basedir}/build" />

        <property name="prepare.done" value="true" />
    </target>

    <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/lib">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>

        <property name="lint.done" value="true" />
    </target>

    <target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/lib" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true" />
    </target>

    <target name="phploc-ci" unless="phploc.done" depends="prepare" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/temporary/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/temporary/build/logs/phploc.xml" />

            <arg path="${basedir}/lib" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true" />
    </target>

    <target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/temporary/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/temporary/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/temporary/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/lib" />
        </exec>

        <property name="pdepend.done" value="true" />
    </target>

    <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/lib/DoctrineExtensions/NestedSet/" />
            <arg value="text" />
            <arg path="${basedir}/.phpmd" />
        </exec>

        <property name="phpmd.done" value="true" />
    </target>

    <target name="phpmd-ci" unless="phpmd.done" depends="prepare" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/lib/DoctrineExtensions/NestedSet/" />
            <arg value="xml" />
            <arg path="${basedir}/.phpmd" />

            <arg value="--reportfile" />
            <arg path="${basedir}/temporary/build/logs/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true" />
    </target>

    <target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${basedir}/lib/DoctrineExtensions/NestedSet/" />
        </exec>

        <property name="phpcpd.done" value="true" />
    </target>

    <target name="phpcpd-ci" unless="phpcpd.done" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/temporary/build/logs/pmd-cpd.xml" />

            <arg path="${basedir}/lib/DoctrineExtensions/NestedSet/" />
        </exec>

        <property name="phpcpd.done" value="true" />
    </target>

    <target name="phpunit" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration" />
            <arg path="${basedir}/tests/phpunit.xml" />
        </exec>

        <property name="phpunit.done" value="true" />
    </target>

    <target name="phpdox" depends="phpunit,phploc-ci,phpcpd-ci,phpmd-ci" description="Generate API documentation using phpDox">
        <exec executable="${phpdox}">
            <arg value="-f" />
            <arg value="${basedir}/phpdox.xml" />
        </exec>
    </target>

    <target name="phpunit-no-coverage" unless="phpunit.done" depends="prepare" description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration" />
            <arg path="${basedir}/tests/phpunit.xml" />
            <arg value="--no-coverage" />
        </exec>

        <property name="phpunit.done" value="true" />
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0" />
                </not>
            </condition>
        </fail>
    </target>

    <target name="-finalize">
        <zip destfile="${basedir}/build/latest.zip" basedir="${basedir}/lib" includes="**/*" />
    </target>
</project>